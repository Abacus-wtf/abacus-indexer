// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PricingSessionCreated extends ethereum.Event {
  get params(): PricingSessionCreated__Params {
    return new PricingSessionCreated__Params(this);
  }
}

export class PricingSessionCreated__Params {
  _event: PricingSessionCreated;

  constructor(event: PricingSessionCreated) {
    this._event = event;
  }

  get creator_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftAddress_(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenid_(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get initialAppraisal_(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get bounty_(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class appraisalIncreased extends ethereum.Event {
  get params(): appraisalIncreased__Params {
    return new appraisalIncreased__Params(this);
  }
}

export class appraisalIncreased__Params {
  _event: appraisalIncreased;

  constructor(event: appraisalIncreased) {
    this._event = event;
  }

  get sender_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftAddress_(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenid_(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class bountyIncreased extends ethereum.Event {
  get params(): bountyIncreased__Params {
    return new bountyIncreased__Params(this);
  }
}

export class bountyIncreased__Params {
  _event: bountyIncreased;

  constructor(event: bountyIncreased) {
    this._event = event;
  }

  get sender_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftAddress_(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenid_(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount_(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ethClaimedByUser extends ethereum.Event {
  get params(): ethClaimedByUser__Params {
    return new ethClaimedByUser__Params(this);
  }
}

export class ethClaimedByUser__Params {
  _event: ethClaimedByUser;

  constructor(event: ethClaimedByUser) {
    this._event = event;
  }

  get user_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethClaimed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ethToABCExchange extends ethereum.Event {
  get params(): ethToABCExchange__Params {
    return new ethToABCExchange__Params(this);
  }
}

export class ethToABCExchange__Params {
  _event: ethToABCExchange;

  constructor(event: ethToABCExchange) {
    this._event = event;
  }

  get user_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethExchanged(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ppSent(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class finalAppraisalDetermined extends ethereum.Event {
  get params(): finalAppraisalDetermined__Params {
    return new finalAppraisalDetermined__Params(this);
  }
}

export class finalAppraisalDetermined__Params {
  _event: finalAppraisalDetermined;

  constructor(event: finalAppraisalDetermined) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftAddress_(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenid_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get finalAppraisal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOfParticipants(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalStake(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class newAppraisalAdded extends ethereum.Event {
  get params(): newAppraisalAdded__Params {
    return new newAppraisalAdded__Params(this);
  }
}

export class newAppraisalAdded__Params {
  _event: newAppraisalAdded;

  constructor(event: newAppraisalAdded) {
    this._event = event;
  }

  get voter_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftAddress_(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenid_(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stake_(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get userHash_(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class sessionEnded extends ethereum.Event {
  get params(): sessionEnded__Params {
    return new sessionEnded__Params(this);
  }
}

export class sessionEnded__Params {
  _event: sessionEnded;

  constructor(event: sessionEnded) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class userHarvested extends ethereum.Event {
  get params(): userHarvested__Params {
    return new userHarvested__Params(this);
  }
}

export class userHarvested__Params {
  _event: userHarvested;

  constructor(event: userHarvested) {
    this._event = event;
  }

  get user_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftAddress_(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenid_(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get harvested(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class voteWeighed extends ethereum.Event {
  get params(): voteWeighed__Params {
    return new voteWeighed__Params(this);
  }
}

export class voteWeighed__Params {
  _event: voteWeighed;

  constructor(event: voteWeighed) {
    this._event = event;
  }

  get user_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nftAddress_(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenid_(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get appraisal(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PricingSession__NftSessionCheckResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class PricingSession__NftSessionCoreResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class PricingSession extends ethereum.SmartContract {
  static bind(address: Address): PricingSession {
    return new PricingSession("PricingSession", address);
  }

  ABCToken(): Address {
    let result = super.call("ABCToken", "ABCToken():(address)", []);

    return result[0].toAddress();
  }

  try_ABCToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("ABCToken", "ABCToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  NftSessionCheck(param0: Bytes): PricingSession__NftSessionCheckResult {
    let result = super.call(
      "NftSessionCheck",
      "NftSessionCheck(bytes32):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new PricingSession__NftSessionCheckResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_NftSessionCheck(
    param0: Bytes
  ): ethereum.CallResult<PricingSession__NftSessionCheckResult> {
    let result = super.tryCall(
      "NftSessionCheck",
      "NftSessionCheck(bytes32):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PricingSession__NftSessionCheckResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  NftSessionCore(param0: Bytes): PricingSession__NftSessionCoreResult {
    let result = super.call(
      "NftSessionCore",
      "NftSessionCore(bytes32):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new PricingSession__NftSessionCoreResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_NftSessionCore(
    param0: Bytes
  ): ethereum.CallResult<PricingSession__NftSessionCoreResult> {
    let result = super.tryCall(
      "NftSessionCore",
      "NftSessionCore(bytes32):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PricingSession__NftSessionCoreResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  Treasury(): Address {
    let result = super.call("Treasury", "Treasury():(address)", []);

    return result[0].toAddress();
  }

  try_Treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("Treasury", "Treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claim(nftAddress: Address, tokenid: BigInt): BigInt {
    let result = super.call("claim", "claim(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(nftAddress),
      ethereum.Value.fromUnsignedBigInt(tokenid)
    ]);

    return result[0].toBigInt();
  }

  try_claim(nftAddress: Address, tokenid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claim", "claim(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(nftAddress),
      ethereum.Value.fromUnsignedBigInt(tokenid)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ethToAbc(): BigInt {
    let result = super.call("ethToAbc", "ethToAbc():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ethToAbc(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ethToAbc", "ethToAbc():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  finalAppraisalValue(param0: Bytes): BigInt {
    let result = super.call(
      "finalAppraisalValue",
      "finalAppraisalValue(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_finalAppraisalValue(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "finalAppraisalValue",
      "finalAppraisalValue(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEthPayout(nftAddress: Address, tokenid: BigInt): BigInt {
    let result = super.call(
      "getEthPayout",
      "getEthPayout(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenid)
      ]
    );

    return result[0].toBigInt();
  }

  try_getEthPayout(
    nftAddress: Address,
    tokenid: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEthPayout",
      "getEthPayout(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStatus(nftAddress: Address, tokenid: BigInt): BigInt {
    let result = super.call(
      "getStatus",
      "getStatus(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenid)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStatus(
    nftAddress: Address,
    tokenid: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStatus",
      "getStatus(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVoterCheck(nftAddress: Address, tokenid: BigInt, _user: Address): BigInt {
    let result = super.call(
      "getVoterCheck",
      "getVoterCheck(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return result[0].toBigInt();
  }

  try_getVoterCheck(
    nftAddress: Address,
    tokenid: BigInt,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVoterCheck",
      "getVoterCheck(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftNonce(param0: Address, param1: BigInt): BigInt {
    let result = super.call("nftNonce", "nftNonce(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBigInt();
  }

  try_nftNonce(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftNonce",
      "nftNonce(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalStored(param0: Address): BigInt {
    let result = super.call(
      "principalStored",
      "principalStored(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_principalStored(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalStored",
      "principalStored(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  profitStored(param0: Address): BigInt {
    let result = super.call("profitStored", "profitStored(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_profitStored(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "profitStored",
      "profitStored(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _ABCToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _auction(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddToAppraisalCall extends ethereum.Call {
  get inputs(): AddToAppraisalCall__Inputs {
    return new AddToAppraisalCall__Inputs(this);
  }

  get outputs(): AddToAppraisalCall__Outputs {
    return new AddToAppraisalCall__Outputs(this);
  }
}

export class AddToAppraisalCall__Inputs {
  _call: AddToAppraisalCall;

  constructor(call: AddToAppraisalCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddToAppraisalCall__Outputs {
  _call: AddToAppraisalCall;

  constructor(call: AddToAppraisalCall) {
    this._call = call;
  }
}

export class AddToBountyCall extends ethereum.Call {
  get inputs(): AddToBountyCall__Inputs {
    return new AddToBountyCall__Inputs(this);
  }

  get outputs(): AddToBountyCall__Outputs {
    return new AddToBountyCall__Outputs(this);
  }
}

export class AddToBountyCall__Inputs {
  _call: AddToBountyCall;

  constructor(call: AddToBountyCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddToBountyCall__Outputs {
  _call: AddToBountyCall;

  constructor(call: AddToBountyCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimPrincipalUsedCall extends ethereum.Call {
  get inputs(): ClaimPrincipalUsedCall__Inputs {
    return new ClaimPrincipalUsedCall__Inputs(this);
  }

  get outputs(): ClaimPrincipalUsedCall__Outputs {
    return new ClaimPrincipalUsedCall__Outputs(this);
  }
}

export class ClaimPrincipalUsedCall__Inputs {
  _call: ClaimPrincipalUsedCall;

  constructor(call: ClaimPrincipalUsedCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimPrincipalUsedCall__Outputs {
  _call: ClaimPrincipalUsedCall;

  constructor(call: ClaimPrincipalUsedCall) {
    this._call = call;
  }
}

export class ClaimProfitsEarnedCall extends ethereum.Call {
  get inputs(): ClaimProfitsEarnedCall__Inputs {
    return new ClaimProfitsEarnedCall__Inputs(this);
  }

  get outputs(): ClaimProfitsEarnedCall__Outputs {
    return new ClaimProfitsEarnedCall__Outputs(this);
  }
}

export class ClaimProfitsEarnedCall__Inputs {
  _call: ClaimProfitsEarnedCall;

  constructor(call: ClaimProfitsEarnedCall) {
    this._call = call;
  }

  get trigger(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimProfitsEarnedCall__Outputs {
  _call: ClaimProfitsEarnedCall;

  constructor(call: ClaimProfitsEarnedCall) {
    this._call = call;
  }
}

export class CreateNewSessionCall extends ethereum.Call {
  get inputs(): CreateNewSessionCall__Inputs {
    return new CreateNewSessionCall__Inputs(this);
  }

  get outputs(): CreateNewSessionCall__Outputs {
    return new CreateNewSessionCall__Outputs(this);
  }
}

export class CreateNewSessionCall__Inputs {
  _call: CreateNewSessionCall;

  constructor(call: CreateNewSessionCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _initialAppraisal(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _votingTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateNewSessionCall__Outputs {
  _call: CreateNewSessionCall;

  constructor(call: CreateNewSessionCall) {
    this._call = call;
  }
}

export class EndSessionCall extends ethereum.Call {
  get inputs(): EndSessionCall__Inputs {
    return new EndSessionCall__Inputs(this);
  }

  get outputs(): EndSessionCall__Outputs {
    return new EndSessionCall__Outputs(this);
  }
}

export class EndSessionCall__Inputs {
  _call: EndSessionCall;

  constructor(call: EndSessionCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EndSessionCall__Outputs {
  _call: EndSessionCall;

  constructor(call: EndSessionCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class SetAuctionCall extends ethereum.Call {
  get inputs(): SetAuctionCall__Inputs {
    return new SetAuctionCall__Inputs(this);
  }

  get outputs(): SetAuctionCall__Outputs {
    return new SetAuctionCall__Outputs(this);
  }
}

export class SetAuctionCall__Inputs {
  _call: SetAuctionCall;

  constructor(call: SetAuctionCall) {
    this._call = call;
  }

  get _auction(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuctionCall__Outputs {
  _call: SetAuctionCall;

  constructor(call: SetAuctionCall) {
    this._call = call;
  }
}

export class SetAuctionStatusCall extends ethereum.Call {
  get inputs(): SetAuctionStatusCall__Inputs {
    return new SetAuctionStatusCall__Inputs(this);
  }

  get outputs(): SetAuctionStatusCall__Outputs {
    return new SetAuctionStatusCall__Outputs(this);
  }
}

export class SetAuctionStatusCall__Inputs {
  _call: SetAuctionStatusCall;

  constructor(call: SetAuctionStatusCall) {
    this._call = call;
  }

  get status(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAuctionStatusCall__Outputs {
  _call: SetAuctionStatusCall;

  constructor(call: SetAuctionStatusCall) {
    this._call = call;
  }
}

export class SetFinalAppraisalCall extends ethereum.Call {
  get inputs(): SetFinalAppraisalCall__Inputs {
    return new SetFinalAppraisalCall__Inputs(this);
  }

  get outputs(): SetFinalAppraisalCall__Outputs {
    return new SetFinalAppraisalCall__Outputs(this);
  }
}

export class SetFinalAppraisalCall__Inputs {
  _call: SetFinalAppraisalCall;

  constructor(call: SetFinalAppraisalCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFinalAppraisalCall__Outputs {
  _call: SetFinalAppraisalCall;

  constructor(call: SetFinalAppraisalCall) {
    this._call = call;
  }
}

export class SetVoteCall extends ethereum.Call {
  get inputs(): SetVoteCall__Inputs {
    return new SetVoteCall__Inputs(this);
  }

  get outputs(): SetVoteCall__Outputs {
    return new SetVoteCall__Outputs(this);
  }
}

export class SetVoteCall__Inputs {
  _call: SetVoteCall;

  constructor(call: SetVoteCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get concealedAppraisal(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SetVoteCall__Outputs {
  _call: SetVoteCall;

  constructor(call: SetVoteCall) {
    this._call = call;
  }
}

export class UpdateVoteCall extends ethereum.Call {
  get inputs(): UpdateVoteCall__Inputs {
    return new UpdateVoteCall__Inputs(this);
  }

  get outputs(): UpdateVoteCall__Outputs {
    return new UpdateVoteCall__Outputs(this);
  }
}

export class UpdateVoteCall__Inputs {
  _call: UpdateVoteCall;

  constructor(call: UpdateVoteCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get concealedAppraisal(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UpdateVoteCall__Outputs {
  _call: UpdateVoteCall;

  constructor(call: UpdateVoteCall) {
    this._call = call;
  }
}

export class WeightVoteCall extends ethereum.Call {
  get inputs(): WeightVoteCall__Inputs {
    return new WeightVoteCall__Inputs(this);
  }

  get outputs(): WeightVoteCall__Outputs {
    return new WeightVoteCall__Outputs(this);
  }
}

export class WeightVoteCall__Inputs {
  _call: WeightVoteCall;

  constructor(call: WeightVoteCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get appraisal(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get seedNum(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WeightVoteCall__Outputs {
  _call: WeightVoteCall;

  constructor(call: WeightVoteCall) {
    this._call = call;
  }
}
