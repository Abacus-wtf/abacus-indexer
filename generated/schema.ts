// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PricingSession extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("nftAddress", Value.fromString(""));
    this.set("tokenId", Value.fromI32(0));
    this.set("nonce", Value.fromBigInt(BigInt.zero()));
    this.set("finalAppraisalValue", Value.fromBigInt(BigInt.zero()));
    this.set("totalStaked", Value.fromBigInt(BigInt.zero()));
    this.set("bounty", Value.fromBigInt(BigInt.zero()));
    this.set("votingTime", Value.fromBigInt(BigInt.zero()));
    this.set("endTime", Value.fromBigInt(BigInt.zero()));
    this.set("sessionStatus", Value.fromI32(0));
    this.set("participants", Value.fromStringArray(new Array(0)));
    this.set("numParticipants", Value.fromI32(0));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("creator", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PricingSession entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PricingSession entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PricingSession", id.toString(), this);
    }
  }

  static load(id: string): PricingSession | null {
    return changetype<PricingSession | null>(store.get("PricingSession", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftAddress(): string {
    let value = this.get("nftAddress");
    return value!.toString();
  }

  set nftAddress(value: string) {
    this.set("nftAddress", Value.fromString(value));
  }

  get tokenId(): i32 {
    let value = this.get("tokenId");
    return value!.toI32();
  }

  set tokenId(value: i32) {
    this.set("tokenId", Value.fromI32(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    return value!.toBigInt();
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get finalAppraisalValue(): BigInt {
    let value = this.get("finalAppraisalValue");
    return value!.toBigInt();
  }

  set finalAppraisalValue(value: BigInt) {
    this.set("finalAppraisalValue", Value.fromBigInt(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    return value!.toBigInt();
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get bounty(): BigInt {
    let value = this.get("bounty");
    return value!.toBigInt();
  }

  set bounty(value: BigInt) {
    this.set("bounty", Value.fromBigInt(value));
  }

  get votingTime(): BigInt {
    let value = this.get("votingTime");
    return value!.toBigInt();
  }

  set votingTime(value: BigInt) {
    this.set("votingTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value!.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get sessionStatus(): i32 {
    let value = this.get("sessionStatus");
    return value!.toI32();
  }

  set sessionStatus(value: i32) {
    this.set("sessionStatus", Value.fromI32(value));
  }

  get participants(): Array<string> {
    let value = this.get("participants");
    return value!.toStringArray();
  }

  set participants(value: Array<string>) {
    this.set("participants", Value.fromStringArray(value));
  }

  get numParticipants(): i32 {
    let value = this.get("numParticipants");
    return value!.toI32();
  }

  set numParticipants(value: i32) {
    this.set("numParticipants", Value.fromI32(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Array<string> {
    let value = this.get("creator");
    return value!.toStringArray();
  }

  set creator(value: Array<string>) {
    this.set("creator", Value.fromStringArray(value));
  }

  get participant(): Array<string> {
    let value = this.get("participant");
    return value!.toStringArray();
  }

  set participant(value: Array<string>) {
    this.set("participant", Value.fromStringArray(value));
  }
}
